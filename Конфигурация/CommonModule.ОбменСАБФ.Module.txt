// <Описание функции>
//
// Параметры:
//  <тОписаниеОшибки>  - <Строка> - Необязательный. Функция в параметр возвращает возникшие ошибки для обработки
//
// Возвращаемое значение:
//   <Булево>   - истина - отправка прошла успешно, ложь - отправка не удалась.
//
функция ОтправитьДанныеНаСервер (тОписаниеОшибки = "") экспорт
	
	Попытка
		стрРезультат = Новый Структура();
		
		КС = Новый КвалификаторыСтроки(20);
		масТип = Новый Массив();
		масТип.Добавить(Тип("Строка"));
		ТипСтроки = Новый ОписаниеТипов(масТип, ,,,КС);
		
		КД = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
		масТипДата = Новый Массив();
		масТипДата.Добавить(Тип("Дата"));
		ТипДаты = Новый ОписаниеТипов(масТипДата, , ,,,КД);
		
		//Сформируем список принятых заявок
		тзЗаявки = Новый ТаблицаЗначений();
		тзЗаявки.Колонки.Добавить("Состояние",ТипСтроки);
		тзЗаявки.Колонки.Добавить("Дата",ТипДаты);
		тзЗаявки.Колонки.Добавить("Номер",ТипСтроки);
		тзЗаявки.Колонки.Добавить("СрокИсполнения",ТипДаты);
		
		//добавим в результирующую таблицу заявки принятые
		Отбор = Новый Структура("Состояние");
		Отбор.Состояние = Перечисления.СостояниеЗаявкиПереданные.Принята;
		регЗаявкиПереданные = РегистрыСведений.ЗаявкиПереданные.Выбрать(Отбор);
		Пока регЗаявкиПереданные.Следующий() цикл
			стр = тзЗаявки.Добавить();
			стр.Состояние = "Принята";
			стр.Дата = регЗаявкиПереданные.Дата;
			стр.Номер = регЗаявкиПереданные.Номер;
			стр.СрокИсполнения = регЗаявкиПереданные.СрокИсполнения;
		КонецЦикла;
		
		//добавим в результирующую таблицу заявки отклоненные
		Отбор = Новый Структура("Состояние");
		Отбор.Состояние = Перечисления.СостояниеЗаявкиПереданные.Отклонена;
		регЗаявкиПереданные = РегистрыСведений.ЗаявкиПереданные.Выбрать(Отбор);
		Пока регЗаявкиПереданные.Следующий() цикл
			стр = тзЗаявки.Добавить();
			стр.Состояние = "Отклонена";
			стр.Дата = регЗаявкиПереданные.Дата;
			стр.Номер = регЗаявкиПереданные.Номер;
			стр.СрокИсполнения = регЗаявкиПереданные.СрокИсполнения;
		КонецЦикла;
		
		//добавим в результирующую таблицу заявки в работе
		Отбор = Новый Структура("Состояние");
		Отбор.Состояние = Перечисления.СостояниеЗаявкиПринятые.ВРаботе;
		регЗаявкиПринятые = РегистрыСведений.ЗаявкиПринятые.Выбрать(Отбор);
		Пока регЗаявкиПринятые.Следующий() цикл
			стр = тзЗаявки.Добавить();
			стр.Состояние = "В работе";
			стр.Дата = регЗаявкиПринятые.Дата;
			стр.Номер = регЗаявкиПринятые.Номер;
			стр.СрокИсполнения = регЗаявкиПринятые.СрокИсполнения;
		КонецЦикла;
		
		стрРезультат.Вставить("Заявки", тзЗаявки);
		
		//Выгрузим события
		тзСобытия = Новый ТаблицаЗначений;
		регСобытия = РегистрыСведений.События.СоздатьНаборЗаписей();
		регСобытия.Прочитать();
		тзСобытия = регСобытия.Выгрузить();
		стрРезультат.Вставить("События", тзСобытия);
		
		//Выгрузим наряд-заказы
		тзНЗ = Новый ТаблицаЗначений;
		регНЗ = РегистрыСведений.НЗ.СоздатьНаборЗаписей();
		регНЗ.Прочитать();
		тзНЗ = регНЗ.Выгрузить();
		стрРезультат.Вставить("НЗ", тзНЗ);
		
		//Передадим данные на сервер
		Соединение = ОбменСАБФ.ПодключитьСервис();
		тПользователь = Константы.Пользователь.Получить();
		тПароль = Константы.Пароль.Получить();
		Соединение.Пользователь = тПользователь;
		Соединение.Пароль = тПароль;
		стрРезультат = Новый ХранилищеЗначения (стрРезультат, Новый СжатиеДанных(9));
		Результат = Соединение.WriteStory(стрРезультат);
		Если Не Результат тогда
			Сообщить ("Ошибка при передаче данных на сервер",СтатусСообщения.ОченьВажное);
		иначе
			регСобытия.Очистить();
			регСобытия.Записать(истина);
		КонецЕсли;
		возврат истина;
	исключение
		тОписаниеОшибки = ОписаниеОшибки();
		возврат ложь;
	КонецПопытки;
КонецФункции // ОтправитьДанныеНаСервер()

// Подключает веб-сервис АБФ
//
// Возвращаемое значение:
//   <WSПрокси>   - Прокси для соединения с веб-сервисом
//
функция ПодключитьСервис() экспорт
	Адрес = "http://"+Константы.АдресСервера.Получить()+"/ws/mobExch.1cws?wsdl";
	Определение = Новый WSОпределения(Адрес,Константы.Пользователь.Получить(),Константы.Пароль.Получить());
	Прокси = Новый WSПрокси(Определение, "1ab.ru", "MobExch", "MobExchSoap");
	возврат Прокси;
КонецФункции// ПодключитьСервис()
