// Процедура - Получить заявки на согласование
Процедура ПолучитьЗаявкиНаСогласование() экспорт
	Перем Соединение;
	Соединение = ПодключитьСервисСтатически();
	тПользователь = Константы.Пользователь.Получить();
	тПароль = Константы.Пароль.Получить();
	Соединение.Пользователь = тПользователь;
	Соединение.Пароль = тПароль;
	Результат = Соединение.ReadTasks(тПользователь,тПароль);
	Данные = Результат.Получить();
	Если ТипЗнч(Данные)=Тип("Структура") тогда
		
		Если Данные.Свойство ("СтатусВозврата")=Неопределено тогда
			ЗаписатьРезультатВПротоколОбмена ("Прием", ложь, "Неверно сформирована структура ответа! Не обнаружен статус возврата. Обратитесь к разработчикам!");
			возврат;
		КонецЕсли;
		
		СтатусВозврата = Данные.СтатусВозврата;
		
		Если Не СтатусВозврата Тогда
			ЗаписатьРезультатВПротоколОбмена ("Прием", ложь, "Cервису не удалось сформировать список заявок! Проверьте логин и пароль!");
			возврат;
		КонецЕсли;
		
		Если (Данные.Свойство ("ЗаявкиПереданные") = Неопределено) ИЛИ (Данные.Свойство ("НЗ") = Неопределено) тогда
			ЗаписатьРезультатВПротоколОбмена ("Прием", ложь, "Неверно сформирована структура ответа! Не обнаружена таблица с переданными заявками. Обратитесь к разработчикам!");
			возврат;
		КонецЕсли;
		
		//прочитаем таблицу с переданными заявками
		тзЗаявкиПереданные 	= Данные.ЗаявкиПереданные;
		рсвЗаявкиПереданные = РегистрыСведений.ЗаявкиПереданные.СоздатьНаборЗаписей();
		рсвЗаявкиПереданные.Загрузить(тзЗаявкиПереданные);
		
		для каждого эл из рсвЗаявкиПереданные цикл
			эл.Состояние = Перечисления.СостояниеЗаявкиПереданные.НеОбработана;
		КонецЦикла;
		
		Попытка
			рсвЗаявкиПереданные.Записать(истина);
		Исключение
			ЗаписатьРезультатВПротоколОбмена ("Прием", ложь, "При загрузке списка переданных заявок возникла ошибка: "+ОписаниеОшибки());
			возврат;
		КонецПопытки;
		
		//прочитаем таблицу с принятыми заявками
		тзЗаявкиПринятые 	= Данные.ЗаявкиПринятые;
		рсвЗаявкиПринятые 	= РегистрыСведений.ЗаявкиПринятые.СоздатьНаборЗаписей();
		рсвЗаявкиПринятые.Загрузить(тзЗаявкиПринятые);
		
		для каждого эл из рсвЗаявкиПринятые цикл
			эл.Состояние = Перечисления.СостояниеЗаявкиПринятые.Принята;
		КонецЦикла;
		
		Попытка
			рсвЗаявкиПринятые.Записать(истина);
		Исключение
			ЗаписатьРезультатВПротоколОбмена ("Прием", ложь, "При загрузке списка принятых заявок возникла ошибка: "+ОписаниеОшибки());
			возврат;
		КонецПопытки;
		
		//прочитаем список наряд-заказов
		Если Данные.Свойство ("НЗ") тогда
			
			тзНЗ	= Данные.НЗ.Скопировать();
			тзНЗ.Свернуть ("ДатаЗаявки, НомерЗаявки, ДатаНЗ, НомерНЗ");
			
			//удалим пустые записи
			к = 0;
			Пока к < тзНЗ.Количество() цикл
				Т = тзНЗ[к];
				Если Не ЗначениеЗаполнено (Т.НомерНЗ) тогда
					тзНЗ.Удалить (Т);
					продолжить;
				КонецЕсли;
				к = к + 1;
			КонецЦикла;
			
			//запишем нз в регистр
			рсвНЗ	= РегистрыСведений.НЗ.СоздатьНаборЗаписей();
			рсвНЗ.Загрузить(тзНЗ);			
			Попытка
				рсвНЗ.Записать(истина);
			Исключение
				ЗаписатьРезультатВПротоколОбмена ("Прием", ложь, "При загрузке списка наряд-заказов произошла ошибка: "+ОписаниеОшибки());
				возврат;
			КонецПопытки;
			
		КонецЕсли;
		//прочитаем содержимое наряд-заказов
		Если Данные.Свойство ("НЗ") тогда
			
			тзСтрНЗ		= Данные.НЗ.Скопировать();
			
			//удалим пустые записи
			к = 0;
			В = ТекущаяДата ();
			Пока к < тзСтрНЗ.Количество() цикл
				Т = тзСтрНЗ[к];
				Если Не ЗначениеЗаполнено (Т.НомерНЗ) тогда
					тзСтрНЗ.Удалить (Т);
					продолжить;
				КонецЕсли;
				Т.Период = В - к; //так мы точно не получим записей с одинковым периодом
				к = к + 1;
			КонецЦикла;
			
			//запишем строки нз в регистр
			рсвСтрНЗ	= РегистрыСведений.СтрокиНЗ.СоздатьНаборЗаписей();
			рсвСтрНЗ.Загрузить(тзСтрНЗ);			
			Попытка
				рсвСтрНЗ.Записать(истина);
			Исключение
				ЗаписатьРезультатВПротоколОбмена ("Прием", ложь, "При загрузке строк наряд-заказов произошла ошибка: "+ОписаниеОшибки());
				возврат;
			КонецПопытки;
			
		КонецЕсли;
	иначе
		ЗаписатьРезультатВПротоколОбмена ("Прием", ложь, "Сервис вернул неверную структуру ответа!");
		возврат;
	конецесли;
	ЗаписатьРезультатВПротоколОбмена ("Прием", истина, "успешно");
КонецПроцедуры

// <Описание функции>
//
// Параметры:
//  <тОписаниеОшибки>  - <Строка> - Необязательный. Функция в параметр возвращает возникшие ошибки для обработки
//
// Возвращаемое значение:
//   <Булево>   - истина - отправка прошла успешно, ложь - отправка не удалась.
//
функция ОтправитьДанныеНаСервер (тОписаниеОшибки = "") экспорт
	Попытка
		стрРезультат = Новый Структура();
		
		КС = Новый КвалификаторыСтроки(20);
		масТип = Новый Массив();
		масТип.Добавить(Тип("Строка"));
		ТипСтроки = Новый ОписаниеТипов(масТип, ,,,КС);
		
		КД = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
		масТипДата = Новый Массив();
		масТипДата.Добавить(Тип("Дата"));
		ТипДаты = Новый ОписаниеТипов(масТипДата, , ,,,КД);
		
		//Сформируем список принятых заявок
		тзЗаявки = Новый ТаблицаЗначений();
		тзЗаявки.Колонки.Добавить("Состояние",ТипСтроки);
		тзЗаявки.Колонки.Добавить("Дата",ТипДаты);
		тзЗаявки.Колонки.Добавить("Номер",ТипСтроки);
		тзЗаявки.Колонки.Добавить("СрокИсполнения",ТипДаты);
		
		//добавим в результирующую таблицу заявки принятые
		Отбор = Новый Структура("Состояние");
		Отбор.Состояние = Перечисления.СостояниеЗаявкиПереданные.Принята;
		регЗаявкиПереданные = РегистрыСведений.ЗаявкиПереданные.Выбрать(Отбор);
		Пока регЗаявкиПереданные.Следующий() цикл
			стр = тзЗаявки.Добавить();
			стр.Состояние = "Принята";
			стр.Дата = регЗаявкиПереданные.Дата;
			стр.Номер = регЗаявкиПереданные.Номер;
			стр.СрокИсполнения = регЗаявкиПереданные.СрокИсполнения;
		КонецЦикла;
		
		//добавим в результирующую таблицу заявки отклоненные
		Отбор = Новый Структура("Состояние");
		Отбор.Состояние = Перечисления.СостояниеЗаявкиПереданные.Отклонена;
		регЗаявкиПереданные = РегистрыСведений.ЗаявкиПереданные.Выбрать(Отбор);
		Пока регЗаявкиПереданные.Следующий() цикл
			стр = тзЗаявки.Добавить();
			стр.Состояние = "Отклонена";
			стр.Дата = регЗаявкиПереданные.Дата;
			стр.Номер = регЗаявкиПереданные.Номер;
			стр.СрокИсполнения = регЗаявкиПереданные.СрокИсполнения;
		КонецЦикла;
		
		//добавим в результирующую таблицу заявки в работе
		Отбор = Новый Структура("Состояние");
		Отбор.Состояние = Перечисления.СостояниеЗаявкиПринятые.ВРаботе;
		регЗаявкиПринятые = РегистрыСведений.ЗаявкиПринятые.Выбрать(Отбор);
		Пока регЗаявкиПринятые.Следующий() цикл
			стр = тзЗаявки.Добавить();
			стр.Состояние = "В работе";
			стр.Дата = регЗаявкиПринятые.Дата;
			стр.Номер = регЗаявкиПринятые.Номер;
			стр.СрокИсполнения = регЗаявкиПринятые.СрокИсполнения;
		КонецЦикла;
		
		стрРезультат.Вставить("Заявки", тзЗаявки);
		
		//Выгрузим события
		тзСобытия = Новый ТаблицаЗначений;
		регСобытия = РегистрыСведений.События.СоздатьНаборЗаписей();
		регСобытия.Прочитать();
		тзСобытия = регСобытия.Выгрузить();
		стрРезультат.Вставить("События", тзСобытия);
		
		//Выгрузим наряд-заказы
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	НЗ.ДатаЗаявки,
		|	НЗ.НомерЗаявки,
		|	НЗ.НомерНЗ,
		|	НЗ.ДатаНЗ,
		|	СтрокиНЗ.ВидРабот,
		|	СтрокиНЗ.ВремяРабот
		|ИЗ
		|	РегистрСведений.НЗ КАК НЗ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтрокиНЗ КАК СтрокиНЗ
		|		ПО НЗ.НомерНЗ = СтрокиНЗ.НомерНЗ
		|			И НЗ.ДатаНЗ = СтрокиНЗ.ДатаНЗ";
		
		
		
		тзСтрНЗ = Запрос.Выполнить().Выгрузить();
		стрРезультат.Вставить("СтрНЗ", тзСтрНЗ);
		
		//Передадим данные на сервер
		Соединение = ОбменСАБФ.ПодключитьСервисСтатически();
		тПользователь = Константы.Пользователь.Получить();
		тПароль = Константы.Пароль.Получить();
		Соединение.Пользователь = тПользователь;
		Соединение.Пароль = тПароль;
		стрРезультат = Новый ХранилищеЗначения (стрРезультат, Новый СжатиеДанных(9));
		Результат = Соединение.WriteStory(стрРезультат);
		Если Не Результат тогда
			ЗаписатьРезультатВПротоколОбмена("Отправка", ложь, ""+ТекущаяДата()+" Ошибка при передаче данных на сервер;");
			возврат ложь;
		иначе
			//если запись истории и НЗ прошла успешшно, очистим регистры их хранящие
			регНЗ = РегистрыСведений.НЗ.СоздатьНаборЗаписей();
			регНЗ.Прочитать();
			регНЗ.Очистить();
			регНЗ.Записать(истина);
			
			регСтрНЗ = РегистрыСведений.СтрокиНЗ.СоздатьНаборЗаписей();
			регСтрНЗ.Прочитать();
			регСтрНЗ.Очистить();
			регСтрНЗ.Записать(истина);
			
			регСобытия.Очистить();
			регСобытия.Записать(истина);
		КонецЕсли;
	исключение
		тОписаниеОшибки = ""+ТекущаяДата()+"При передаче данных произошла ошибка: "+ОписаниеОшибки();
		ЗаписатьРезультатВПротоколОбмена("Отправка", ложь, тОписаниеОшибки);
		возврат ложь;
	КонецПопытки;
	ЗаписатьРезультатВПротоколОбмена ("Отправка", истина, "успешно");
	возврат истина;
КонецФункции // ОтправитьДанныеНаСервер()

// Подключает веб-сервис АБФ
//
// Возвращаемое значение:
//   <WSПрокси>   - Прокси для соединения с веб-сервисом
//
функция ПодключитьСервис() экспорт
	Попытка
		Адрес = "http://"+Константы.АдресСервера.Получить()+"/ws/mobExch.1cws?wsdl";
		Определение = Новый WSОпределения(Адрес,Константы.Пользователь.Получить(),Константы.Пароль.Получить());
		Прокси = Новый WSПрокси(Определение, "1ab.ru", "MobExch", "MobExchSoap");
	Исключение
		стрОписаниеОшибки = ""+ОписаниеОшибки();
		ЗаписатьРезультатВПротоколОбмена("Соединение", ложь, стрОписаниеОшибки);
		ВызватьИсключение "Ошибка при подключении к сервисы:" + стрОписаниеОшибки;
	КонецПопытки;
	возврат Прокси;
КонецФункции// ПодключитьСервис()

// Подключает веб-сервис АБФ
//
// Возвращаемое значение:
//   <WSПрокси>   - Прокси для соединения с веб-сервисом
//
функция ПодключитьСервисСтатически() экспорт
	Попытка
		Ссылка = Константы.АдресСервера.Получить();
		Пароль = Константы.Пароль.Получить();
		Пользователь = Константы.Пользователь.Получить();
		Если Ссылка = "PavOper" тогда
			Прокси = WSСсылки.PavOper.СоздатьWSПрокси("1ab.ru", "MobExch", "MobExchSoap");
		иначе
			Прокси = WSСсылки.abf4mob.СоздатьWSПрокси ("1ab.ru", "MobExch", "MobExchSoap");
		КонецЕсли;
	Исключение
		стрОписаниеОшибки = ""+ОписаниеОшибки();
		ЗаписатьРезультатВПротоколОбмена("Соединение", ложь, стрОписаниеОшибки);
		ВызватьИсключение "Ошибка при подключении к сервисы:" + стрОписаниеОшибки;
	КонецПопытки;
	возврат Прокси;
КонецФункции// ПодключитьСервис()

// Процедура - Записать результат в протокол обмена
//
// Параметры:
//  Операция	 - Строка(10) - операция по которой пишем данные в протокол
//  Статус		 - Булево - ложь, если произошла ошибка при обмене
//  Комментарий	 - Строка - Расширенное описание результата обмена
Процедура ЗаписатьРезультатВПротоколОбмена (Операция, Статус, Комментарий) экспорт
	рсв = РегистрыСведений.ПротоколОбмена.СоздатьМенеджерЗаписи();
	рсв.Период 		= ТекущаяДата();
	рсв.Операция 	= Операция;
	рсв.Успешно		= статус;
	рсв.Комментарий = Комментарий;
	рсв.Записать(истина);
	//Сообщить (""+Операция+": "+Комментарий,СтатусСообщения.ОченьВажное);
КонецПроцедуры